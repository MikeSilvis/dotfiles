# =============================================================================
# Development Profile - Aliases, Functions, and Development Tools
# =============================================================================

# Add local bin to PATH
export PATH="/Users/msilvis/.local/bin:$PATH"

# Set vi mode for command line editing
set -o vi

# =============================================================================
# Android Development Configuration
# =============================================================================

# Android SDK configuration
# The SDK is typically installed at ~/Library/Android/sdk (Android Studio)
# or /usr/local/share/android-sdk (Homebrew)
if [ -d "$HOME/Library/Android/sdk" ]; then
    export ANDROID_HOME="$HOME/Library/Android/sdk"
    export ANDROID_SDK_ROOT="$HOME/Library/Android/sdk"
elif [ -d "/usr/local/share/android-sdk" ]; then
    export ANDROID_HOME="/usr/local/share/android-sdk"
    export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"
fi

# Add Android SDK tools to PATH if ANDROID_HOME is set
if [ -n "$ANDROID_HOME" ]; then
    export PATH="$ANDROID_HOME/emulator:$PATH"
    export PATH="$ANDROID_HOME/platform-tools:$PATH"
    export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
    export PATH="$ANDROID_HOME/tools:$PATH"
    export PATH="$ANDROID_HOME/tools/bin:$PATH"
fi

# =============================================================================
# Git Aliases and Functions
# =============================================================================

alias gcm='git commit -m'
alias gs='git status'
alias ga='git add .'
alias gl='git log'
alias gc='git checkout'
alias gr='git remote -v'

# Git prompt configuration (lazy loaded)
function load_git_prompt() {
  if [[ -z "$GIT_PROMPT_LOADED" ]] && [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
    echo "🔄 Loading Git prompt..."
    __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
    source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
    export GIT_PROMPT_LOADED=1
  fi
}

# Git utility functions
function resetHard() {
  git reset --hard
  git submodule update --init
}

function lastAuthor() {
  git log -1 --pretty=format:'%an'  | xargs
}

function gcma() {
  if [[ "Mike Silvis" != "$(lastAuthor)" ]]; then
    echo "Please create an initial commit before running"
    return
  fi

  git add .
  git commit --amend --no-edit
}

function cleanup_merged_prs() {
    # Define the main branch name
    local MAIN_BRANCH="main"

    # Fetch the latest changes from the remote repository
    git fetch origin

    # Switch to the main branch
    git checkout $MAIN_BRANCH

    # Pull the latest changes on the main branch
    git pull origin $MAIN_BRANCH

    # Get a list of merged branches (excluding the main branch)
    local MERGED_BRANCHES=($(git branch --merged $MAIN_BRANCH | grep -vE "^(\*|$MAIN_BRANCH)"))

    # Check if there are any merged branches to delete
    if [ ${#MERGED_BRANCHES[@]} -eq 0 ]; then
        echo "No merged branches found."
        return 0
    fi

   for BRANCH in "${MERGED_BRANCHES[@]}"; do
    # Trim leading and trailing whitespace
    BRANCH=$(echo "$BRANCH" | xargs)

    # Escape branch name for deletion
    ESCAPED_BRANCH=$(printf '%q' "$BRANCH")

    # Delete the local branch
    git branch -d "$ESCAPED_BRANCH"

    # Delete the remote branch (uncomment if needed)
    # git push origin --delete "$ESCAPED_BRANCH"
   done

    echo "Merged branches have been deleted."
}

function cherry_pick() {
    # Prompt for the default branch only once per session
    if [ -z "$DEFAULT_BRANCH" ]; then
        read "DEFAULT_BRANCH?Enter the default branch to cherry-pick from: "
        export DEFAULT_BRANCH
    fi

    echo "Cherry-picking files from branch '$DEFAULT_BRANCH'. Type 'stop' to end."

    # Loop for selecting files to cherry-pick
    while true; do
        read "FILE_PATH?Enter the file to cherry-pick from $DEFAULT_BRANCH (or 'stop' to finish): "

        # Exit the loop if the user types "stop"
        if [[ "$FILE_PATH" == "stop" ]]; then
            echo "Interactive cherry-pick stopped."
            break
        fi

        # Check if the file exists in the specified branch
        if git show "$DEFAULT_BRANCH":"$FILE_PATH" > /dev/null 2>&1; then
            echo "Cherry-picking $FILE_PATH from $DEFAULT_BRANCH..."
            git checkout "$DEFAULT_BRANCH" -- "$FILE_PATH"
        else
            echo "Error: $FILE_PATH does not exist in $DEFAULT_BRANCH."
        fi
    done
}

# =============================================================================
# Development Aliases and Functions
# =============================================================================

# Formatting and build tools
alias format='./Pods/SpaceCommander/format-objc-files.sh -s'
alias bepi='bundle exec pod install'

# Bazel functions
function buildDependencies() {
  bazel build $(bazel query "kind('ios_application|test_suite', rdeps(..., $@/...))")
}

function bazeltest() {
  bundle exec rlib query $@ | bundle exec rlib test
}

function bazelRun() {
  bundle exec rlib query $@ | bundle exec rlib build
}

# Xcode functions
function enableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 0
}

function disableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 1
}

# Development workflow functions
function monday() {
  killall Xcode

  # Clear iTerm cache for better performance
  echo "🧹 Clearing iTerm cache..."
  rm -rf ~/Library/Caches/com.googlecode.iterm2 2>/dev/null || true
  rm -rf ~/Library/Application\ Support/iTerm2/SavedState 2>/dev/null || true
  rm -f ~/Library/Application\ Support/iTerm2/chatdb.sqlite* 2>/dev/null || true
  echo "✅ iTerm cache cleared"

  cd ~/Development/topsoil && git pull && ./compost mobile

  cd ~/Development/ios-register && git clean -xdf && ./tools/bazel clean --expunge && dxdd

  git cleanup-branches

  cd ~/Development/mcp-square && git pull

  cd ~/Development/ios-register && sq warmup-xcode

  # Sync dotfiles at the end (includes Oh My Zsh update)
  echo "🔄 Syncing dotfiles..."
  sync
}

function superpos() {
  sq gen \
    SPOS \
        --user-build-settings=--//Verticals/SPOS:superpos_invoices=true \
        --user-build-settings=--//Verticals/SPOS:superpos_retail=true \
        --user-build-settings=--//Verticals/SPOS:superpos_appointments=true \
        --user-build-settings=--//Verticals/SPOS:superpos_restaurant=true \
        --auto-open \
        --name SuperPOS
}

# Utility aliases
alias bz="pkill Xcode; sq gen $@ --auto-open"
alias downloadSnapshotImages="be ./Scripts/download-view-test-images.rb $@ --use-netrc"

# =============================================================================
# Dotfiles Management
# =============================================================================

# load-all() - Load all lazy-loaded components for full functionality
# Usage: load-all
# Note: RVM is already loaded by Square configs, so this just marks it as loaded
function load-all() {
    echo "🚀 Loading all development tools..."
    load_oh_my_zsh_plugins
    load_antigen_plugins
    load_nvm
    load_rvm  # Already loaded by Square, just marks as loaded
    load_mise
    load_git_prompt
    echo "✅ All tools loaded!"
    echo "💡 Note: RVM was already loaded by Square configs"
}

# sync() - Run dotfiles sync from anywhere
# Usage: sync [options]
# Examples:
#   sync                    # Basic sync
#   sync --dry-run          # See what would be done
#   sync --verbose          # Detailed output
#   sync-dry                # Alias for sync --dry-run
function sync() {
    # Dynamically find the dotfiles directory
    local DOTFILES_DIR
    
    # First, try to find it relative to current directory
    if [ -f "./bin/dotfiles-sync" ]; then
        DOTFILES_DIR="$(pwd)"
    # Then try common locations
    elif [ -d "${HOME}/Developer/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/Developer/dotfiles"
    elif [ -d "${HOME}/Development/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/Development/dotfiles"
    elif [ -d "${HOME}/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/dotfiles"
    else
        echo "❌ Dotfiles directory not found!"
        echo "💡 Please run this command from your dotfiles directory, or clone it first:"
        echo "   git clone https://github.com/msilvis/dotfiles.git ~/Development/dotfiles"
        return 1
    fi
    
    echo "🔍 Using dotfiles directory: $DOTFILES_DIR"
    
    # Change to dotfiles directory
    cd "$DOTFILES_DIR" || return 1
    
    # Run the sync script with any passed arguments
    echo "🚀 Running dotfiles sync from: $(pwd)"
    ./bin/dotfiles-sync "$@"
    
    # Update Oh My Zsh after syncing dotfiles
    echo "🔄 Updating Oh My Zsh..."
    omz update
    
    # Return to original directory
    cd - > /dev/null
}

# Convenient aliases for common sync operations
alias sync-dry='sync --dry-run'
alias sync-verbose='sync --verbose'
alias sync-force='sync --force'

# Aliases for lazy loading
alias load-tools='load-all'
alias load-dev='load-all'

# =============================================================================
# Prompt Management Functions
# =============================================================================

# switch-prompt() - Switch between fast and full git prompts
function switch-prompt() {
    local mode="${1:-fast}"
    
    case "$mode" in
        "fast")
            echo "🚀 Switching to fast git prompt..."
            # Comment out Square zshrc in ~/.zshrc
            sed -i.bak 's/^if \[ -f ~\/Development\/config_files\/square\/zshrc \]; then/# if [ -f ~\/Development\/config_files\/square\/zshrc ]; then/' ~/.zshrc
            sed -i.bak 's/^    source ~\/Development\/config_files\/square\/zshrc/#     source ~\/Development\/config_files\/square\/zshrc/' ~/.zshrc
            sed -i.bak 's/^fi/# fi/' ~/.zshrc
            echo "✅ Fast prompt enabled. Restart your shell or run: source ~/.zshrc"
            ;;
        "full")
            echo "🐌 Switching to full Square git prompt..."
            # Uncomment Square zshrc in ~/.zshrc
            sed -i.bak 's/^# if \[ -f ~\/Development\/config_files\/square\/zshrc \]; then/if [ -f ~\/Development\/config_files\/square\/zshrc ]; then/' ~/.zshrc
            sed -i.bak 's/^#     source ~\/Development\/config_files\/square\/zshrc/    source ~\/Development\/config_files\/square\/zshrc/' ~/.zshrc
            sed -i.bak 's/^# fi/fi/' ~/.zshrc
            echo "✅ Full prompt enabled. Restart your shell or run: source ~/.zshrc"
            ;;
        *)
            echo "Usage: switch-prompt [fast|full]"
            echo "  fast: Use lightweight git prompt (recommended for performance)"
            echo "  full: Use full Square git prompt (more features, slower)"
            ;;
    esac
}

# Aliases for prompt switching
alias prompt-fast='switch-prompt fast'
alias prompt-full='switch-prompt full'

# =============================================================================
# Cache Management Functions
# =============================================================================

# clear-iterm-cache() - Clear iTerm2 cache files for better performance
function clear-iterm-cache() {
    echo "🧹 Clearing iTerm2 cache files..."
    
    # Close iTerm2 first
    echo "⚠️  Please close iTerm2 before clearing cache"
    echo "Press Enter when iTerm2 is closed..."
    read -r
    
    # Clear cache files
    local cache_dir="$HOME/Library/Caches/com.googlecode.iterm2"
    if [ -d "$cache_dir" ]; then
        echo "🗑️  Removing iTerm cache directory..."
        rm -rf "$cache_dir"
        echo "✅ Cleared iTerm cache"
    else
        echo "ℹ️  No iTerm cache found"
    fi
    
    # Clear saved state
    local saved_state="$HOME/Library/Application Support/iTerm2/SavedState"
    if [ -d "$saved_state" ]; then
        echo "🗑️  Removing saved state..."
        rm -rf "$saved_state"
        echo "✅ Cleared saved state"
    fi
    
    echo "🎉 iTerm cache cleared! Restart iTerm2 to see improvements."
}

# Aliases for cache management
alias clear-cache='clear-iterm-cache'
alias iterm-cache='clear-iterm-cache'

# Editor aliases
alias c='cursor .'                    # Open Cursor in current directory
alias cursor-here='cursor .'          # Alternative alias for opening Cursor
alias cursor-new='cursor'             # Open new Cursor window

# =============================================================================
# Zsh Configuration Management
# =============================================================================

# switch-zsh-config() - Switch between minimal and full zsh configurations
function switch-zsh-config() {
    local mode="${1:-minimal}"
    # Dynamically find the dotfiles directory
    local dotfiles_dir
    
    if [ -f "./bin/dotfiles-sync" ]; then
        dotfiles_dir="$(pwd)"
    elif [ -d "${HOME}/Developer/dotfiles" ]; then
        dotfiles_dir="${HOME}/Developer/dotfiles"
    elif [ -d "${HOME}/Development/dotfiles" ]; then
        dotfiles_dir="${HOME}/Development/dotfiles"
    elif [ -d "${HOME}/dotfiles" ]; then
        dotfiles_dir="${HOME}/dotfiles"
    else
        echo "❌ Dotfiles directory not found!"
        return 1
    fi
    
    case "$mode" in
        "minimal")
            echo "🚀 Creating minimal zsh configuration..."
            # Create a minimal config on the fly
            cp ~/.zshrc ~/.zshrc.backup-$(date +%Y%m%d-%H%M%S)
            cat > ~/.zshrc << 'EOF'
# Minimal zsh configuration
set -o vi
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
PROMPT='%~ $ '
autoload -U compinit
compinit
EOF
            echo "✅ Minimal zshrc created"
            echo "💡 Restart your shell or run: source ~/.zshrc"
            ;;
        "full")
            echo "🐌 Switching to full zsh configuration..."
            if [ -f "$dotfiles_dir/configs/shell/zshrc" ]; then
                cp ~/.zshrc ~/.zshrc.backup-$(date +%Y%m%d-%H%M%S)
                cp "$dotfiles_dir/configs/shell/zshrc" ~/.zshrc
                echo "✅ Full zshrc activated"
                echo "💡 Restart your shell or run: source ~/.zshrc"
            else
                echo "❌ Full zshrc not found at: $dotfiles_dir/configs/shell/zshrc"
            fi
            ;;
        *)
            echo "Usage: switch-zsh-config [minimal|full]"
            echo "  minimal: Use lightweight zsh config (maximum performance)"
            echo "  full: Use full zsh config with all features"
            ;;
    esac
}

# Aliases for zsh config switching
alias zsh-minimal='switch-zsh-config minimal'
alias zsh-full='switch-zsh-config full'

# Aliases for extension management
alias install-exts='install-extensions'

# install-extensions() - Manually install editor extensions that failed during sync
function install-extensions() {
    echo "🔌 Installing editor extensions manually..."
    
    # VSCode extensions removed - using Cursor only
    
    # Cursor extensions
    if command -v cursor >/dev/null 2>&1; then
        echo "📦 Installing Cursor extensions..."
        # Dynamically find the dotfiles directory
        local dotfiles_dir
        
        if [ -f "./bin/dotfiles-sync" ]; then
            dotfiles_dir="$(pwd)"
        elif [ -d "${HOME}/Developer/dotfiles" ]; then
            dotfiles_dir="${HOME}/Developer/dotfiles"
        elif [ -d "${HOME}/Development/dotfiles" ]; then
            dotfiles_dir="${HOME}/Development/dotfiles"
        elif [ -d "${HOME}/dotfiles" ]; then
            dotfiles_dir="${HOME}/dotfiles"
        fi
        
        if [ -f "$dotfiles_dir/configs/editors/cursor/extensions.txt" ]; then
            while IFS= read -r extension; do
                if [ -n "$extension" ]; then
                    echo "  Installing: $extension"
                    cursor --install-extension "$extension" || echo "    ⚠️  Failed to install $extension"
                fi
            done < "$dotfiles_dir/configs/editors/cursor/extensions.txt"
        fi
    fi
    
    echo "✅ Extension installation complete!"
}

# check-compatibility() - Check compatibility between dotfiles and Square configs
function check-compatibility() {
    echo "🔍 Checking compatibility between dotfiles and Square configs..."
    
    # Check if Square configs are loaded
    if [[ -n "$SQUARE_HOME" ]]; then
        echo "✅ SQUARE_HOME is set: $SQUARE_HOME"
    else
        echo "⚠️  SQUARE_HOME not set (Square configs may not be loaded)"
    fi
    
    # Check RVM status
    if command -v rvm >/dev/null 2>&1; then
        echo "✅ RVM is available (loaded by Square configs)"
    else
        echo "⚠️  RVM not found"
    fi
    
    # Check if Square zshrc is sourced
    if [[ -f ~/Development/config_files/square/zshrc ]]; then
        echo "✅ Square zshrc exists"
    else
        echo "⚠️  Square zshrc not found"
    fi
    
    echo "💡 Your dotfiles are designed to work with Square's compost setup"
}
alias sync-help='sync --help'

# dotfiles-status() - Check the status of your dotfiles repository
function dotfiles-status() {
    # Dynamically find the dotfiles directory
    local DOTFILES_DIR
    
    if [ -f "./bin/dotfiles-sync" ]; then
        DOTFILES_DIR="$(pwd)"
    elif [ -d "${HOME}/Developer/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/Developer/dotfiles"
    elif [ -d "${HOME}/Development/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/Development/dotfiles"
    elif [ -d "${HOME}/dotfiles" ]; then
        DOTFILES_DIR="${HOME}/dotfiles"
    else
        echo "❌ Dotfiles directory not found!"
        return 1
    fi
    
    if [ ! -d "$DOTFILES_DIR" ]; then
        echo "❌ Dotfiles directory not found at: $DOTFILES_DIR"
        return 1
    fi
    
    cd "$DOTFILES_DIR" || return 1
    
    echo "📁 Dotfiles Repository Status:"
    echo "📍 Location: $(pwd)"
    echo "🌿 Branch: $(git branch --show-current 2>/dev/null || echo 'Not a git repository')"
    echo "📊 Status: $(git status --porcelain 2>/dev/null | wc -l | xargs) uncommitted changes"
    echo "🔄 Last sync: $(git log -1 --format='%ar' 2>/dev/null || echo 'Unknown')"
    
    # Check if sync script exists and is executable
    if [ -x "./bin/dotfiles-sync" ]; then
        echo "✅ Sync script is ready"
    else
        echo "❌ Sync script not found or not executable"
    fi
    
    cd - > /dev/null
}

# =============================================================================
# Work-specific Functions (Square)
# =============================================================================

function override-owner-owl() {
  SHA="$1"
  OVERRIDE_REASON="$2"
  CHECK_NAME="Owner Owl"

  if [[ -z $SHA ]]; then
    echo "Must provide a SHA and override reason"
    return 1
  fi

  if [[ -z $OVERRIDE_REASON ]]; then
    echo "Must provide a SHA and override reason"
    return 1
  fi

  bundle exec sq-github-notify-commit-status \
    --fail \
    --silent \
    --repo squareup/ios-register \
    --sha "$SHA" \
    --state success \
    --name "$CHECK_NAME" \
    --description "$OVERRIDE_REASON"
}