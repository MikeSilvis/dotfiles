# =============================================================================
# Mike's Personal Bash Configuration
# =============================================================================

# Color definitions for prompt
RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;36m\]"
OFF="\[\033[0m\]"

# Add local bin to PATH
export PATH="/Users/msilvis/.local/bin:$PATH"

# Set vi mode for command line editing
set -o vi

# =============================================================================
# Git Aliases and Functions
# =============================================================================

alias gcm='git commit -m'
alias gs='git status'
alias ga='git add .'
alias gl='git log'
alias gc='git checkout'
alias gr='git remote -v'
alias cb=`(__git_ps1 "%s")`

# Git prompt configuration
if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
  __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
  GIT_PROMPT_ONLY_IN_REPO=1
  source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
fi

# Git utility functions
function resetHard() {
  git reset --hard
  git submodule update --init
}

function lastAuthor() {
  git log -1 --pretty=format:'%an'  | xargs
}

function gcma() {
  if [[ "Mike Silvis" != "$(lastAuthor)" ]]; then
    echo "Please create an initial commit before running"
    return
  fi

  git add .
  git commit --amend --no-edit
}

function cleanup_merged_prs() {
    # Define the main branch name
    local MAIN_BRANCH="main"

    # Fetch the latest changes from the remote repository
    git fetch origin

    # Switch to the main branch
    git checkout $MAIN_BRANCH

    # Pull the latest changes on the main branch
    git pull origin $MAIN_BRANCH

    # Get a list of merged branches (excluding the main branch)
    local MERGED_BRANCHES=($(git branch --merged $MAIN_BRANCH | grep -vE "^(\*|$MAIN_BRANCH)"))

    # Check if there are any merged branches to delete
    if [ ${#MERGED_BRANCHES[@]} -eq 0 ]; then
        echo "No merged branches found."
        return 0
    fi

   for BRANCH in "${MERGED_BRANCHES[@]}"; do
    # Trim leading and trailing whitespace
    BRANCH=$(echo "$BRANCH" | xargs)

    # Escape branch name for deletion
    ESCAPED_BRANCH=$(printf '%q' "$BRANCH")

    # Delete the local branch
    git branch -d "$ESCAPED_BRANCH"

    # Delete the remote branch (uncomment if needed)
    # git push origin --delete "$ESCAPED_BRANCH"
   done

    echo "Merged branches have been deleted."
}

function cherry_pick() {
    # Prompt for the default branch only once per session
    if [ -z "$DEFAULT_BRANCH" ]; then
        read "DEFAULT_BRANCH?Enter the default branch to cherry-pick from: "
        export DEFAULT_BRANCH
    fi

    echo "Cherry-picking files from branch '$DEFAULT_BRANCH'. Type 'stop' to end."

    # Loop for selecting files to cherry-pick
    while true; do
        read "FILE_PATH?Enter the file to cherry-pick from $DEFAULT_BRANCH (or 'stop' to finish): "

        # Exit the loop if the user types "stop"
        if [[ "$FILE_PATH" == "stop" ]]; then
            echo "Interactive cherry-pick stopped."
            break
        fi

        # Check if the file exists in the specified branch
        if git show "$DEFAULT_BRANCH":"$FILE_PATH" > /dev/null 2>&1; then
            echo "Cherry-picking $FILE_PATH from $DEFAULT_BRANCH..."
            git checkout "$DEFAULT_BRANCH" -- "$FILE_PATH"
        else
            echo "Error: $FILE_PATH does not exist in $DEFAULT_BRANCH."
        fi
    done
}

# =============================================================================
# Development Aliases and Functions
# =============================================================================

# Formatting and build tools
alias format='./Pods/SpaceCommander/format-objc-files.sh -s'
alias bepi='bundle exec pod install'

# Bazel functions
function buildDependencies() {
  bazel build $(bazel query "kind('ios_application|test_suite', rdeps(..., $@/...))")
}

function bazeltest() {
  bundle exec rlib query $@ | bundle exec rlib test
}

function bazelRun() {
  bundle exec rlib query $@ | bundle exec rlib build
}

# Xcode functions
function enableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 0
}

function disableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 1
}

# Development workflow functions
function monday() {
  killall Xcode

  cd ~/Development/topsoil && git pull && ./compost mobile

  cd ~/Development/ios-register && git clean -xdf && ./tools/bazel clean --expunge && dxdd

  git cleanup-branches

  cd ~/Development/mcp-square && git pull

  cd ~/Development/ios-register && sq warmup-xcode

  omz update
}

function superpos() {
  sq gen \
    SPOS \
        --user-build-settings=--//Verticals/SPOS:superpos_invoices=true \
        --user-build-settings=--//Verticals/SPOS:superpos_retail=true \
        --user-build-settings=--//Verticals/SPOS:superpos_appointments=true \
        --user-build-settings=--//Verticals/SPOS:superpos_restaurant=true \
        --auto-open \
        --name SuperPOS
}

# Utility aliases
alias bz="pkill Xcode; sq gen $@ --auto-open"
alias downloadSnapshotImages="be ./Scripts/download-view-test-images.rb $@ --use-netrc"

# =============================================================================
# Work-specific Functions (Square)
# =============================================================================

function override-owner-owl() {
  SHA="$1"
  OVERRIDE_REASON="$2"
  CHECK_NAME="Owner Owl"

  if [[ -z $SHA ]]; then
    echo "Must provide a SHA and override reason"
    return 1
  fi

  if [[ -z $OVERRIDE_REASON ]]; then
    echo "Must provide a SHA and override reason"
    return 1
  fi

  bundle exec sq-github-notify-commit-status \
    --fail \
    --silent \
    --repo squareup/ios-register \
    --sha "$SHA" \
    --state success \
    --name "$CHECK_NAME" \
    --description "$OVERRIDE_REASON"
}