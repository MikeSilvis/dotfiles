source ~/.git-prompt.sh

## Git Related
alias gcm='git commit -m'
alias gs='git status'
alias ga='git add .'
alias gl='git log'
alias gc='git checkout'
alias gr='git remote -v'
alias cb=`(__git_ps1 "%s")`
alias format='./Pods/SpaceCommander/format-objc-files.sh -s'
alias bepi='bundle exec pod install'

GIT_EDITOR='vim'

if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
  __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
  GIT_PROMPT_ONLY_IN_REPO=1
  source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
fi

function resetHard() {
  git reset --hard
  git submodule update --init
}

function lastAuthor() {
  git log -1 --pretty=format:'%an'  | xargs
}

function gcma() {
  if [[ "Mike Silvis" != "$(lastAuthor)" ]]; then
    echo "Please create an initial commit before running"
    return
  fi

  git add .
  Scripts/format-swift-files.sh -s
  "/Users/msilvis/Developer/ios-register/master/Pods/SpaceCommander"/format-objc-files.sh -s
  git add .
  git commit --amend
}

function buildDependencies() {
  bazel build $(bazel query "kind('ios_application|test_suite', rdeps(..., $@/...))")
}



function enableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 0
}

function disableIndex() {
  defaults write com.apple.dt.XCode IDEIndexDisable 1
}

export DEVELOPMENT_TEAM_ID='78USZ8YX87'
export APPLE_DEVELOPER_TEAM_ID='78USZ8YX87'
export APPLE_DEVELOPER_EMAIL='mikesilvis@gmail.com'
export ADC_USER_NAME="mikesilvis@gmail.com"

export PROD_APPLE_MERCHANT_ID='merchant.com.mikesilvis.squareup.apple-pay'
export SANDBOX_APPLE_MERCHANT_ID='merchant.com.msilvis.squareup.apple-pay'
export ENABLE_COCOAPODS_FMWK=1

# alias bz="be Scripts/BazelLocal/generate_xcode_project_with_bazel.rb $@ --auto-open"
alias bz="be Scripts/BazelLocal/generate_xcode_project_with_bazel.rb $@ --auto-open --generator=rules_xcodeproj"
alias downloadSnapshotImages="be ./Scripts/download-view-test-images.rb $@ --use-netrc"

# function git() {
#   if [ "$1" = checkout ] && [ "$2" = main ]; then
#     if [ -n "$3" ]; then
#       command git checkout origin/green/main "$3"
#     else
#       command git checkout origin/green/main
#     fi
#   elif [ "$1" = rebase ] && [ "$2" = main ]; then
#     command git fetch &&
#     command git rebase origin/green/main
#   elif [ "$1" = checkout ] && [ "$2" = -b ]; then
#     if [ "$current_branch" = "origin/green/main" ]; then
#       shift 2
#       branch_name="$1"
#       # command git pull &&
#       command git checkout origin/green/main &&
#       command git checkout -b "$branch_name"
#     else
#       command git checkout -b "$branch_name"
#     fi

#   else
#     command git "$@"
#   fi
# }

# git() {
#     if [ "$2" = "main" ]; then
#         set -- "$1" "$2" "origin/green/main" "${@:4}"
#     fi
#     command git "$@"
# }
